/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.serialization.StringSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProducerDemoKeys {

    private static final Logger log = LoggerFactory.getLogger(ProducerDemoKeys.class);

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new ProducerDemoKeys().getGreeting());

        // create Kafka producer properties
        Properties properties = new Properties();
        properties.setProperty("bootstrap.servers", "127.0.0.1:9092");
        properties.setProperty("key.serializer", StringSerializer.class.getName());
        properties.setProperty("value.serializer", StringSerializer.class.getName());

        // create the producer
        KafkaProducer<String, String> producer = new KafkaProducer<>(properties);

        String topic = "demo_java";

        for (int i = 0; i < 10; i++) {

            String key = "id_" + i;
            String value = "Hello World " + i;

            // create producer record
            ProducerRecord<String, String> producerRecord = new ProducerRecord<String, String>(topic, key, value);

            // send data
            producer.send(producerRecord, new org.apache.kafka.clients.producer.Callback() {
                @Override
                public void onCompletion(RecordMetadata metadata, Exception e) {
                    if (e == null) {
                        log.info(
                                "Recived message\n Topic: " + metadata.topic() + "\n Partition: " + metadata.partition()
                                        + "\n Offset: " + metadata.offset() + "\n Timestamp: " + metadata.timestamp()
                                        + "\n Key: " + key + "\n Value: " + value);
                    } else {
                        log.error("Error while producing", e);
                    }
                }
            });
        }

        // flush data
        producer.flush();

        // flush and close producer
        producer.close();
    }
}
